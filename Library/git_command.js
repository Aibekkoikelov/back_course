

// Все команды git которые используются в работе с репозиториями

// git pull origin master  -  обновить репозиторий с удаленного сервера (origin) в ветку master (master)
// git push origin master  -  отправить изменения в удаленный репозиторий (origin) в ветку master (master)
// git add .  -  добавить все изменения в индекс
// git commit -m "message"  -  закоммитить изменения с сообщением "message"
// git status  -  показать статус репозитория
// git branch  -  показать список веток
// git branch -a  -  показать список всех веток
// git branch -r  -  показать список удаленных веток
// git branch -d branch_name  -  удалить ветку branch_name
// git branch -D branch_name  -  удалить ветку branch_name без подтверждения
// git checkout branch_name  -  переключиться на ветку branch_name
// git checkout -b branch_name  -  создать ветку branch_name и переключиться на нее
// git checkout -b branch_name origin/branch_name  -  создать ветку branch_name и переключиться на нее, скачав ее с удаленного сервера
// git checkout --track origin/branch_name  -  создать ветку branch_name и переключиться на нее, скачав ее с удаленного сервера
// git checkout -b branch_name origin/branch_name  -  создать ветку branch_name и переключиться на нее, скачав ее с удаленного сервера

// git merge branch_name  -  смержить ветку branch_name в текущую ветку (master)
// git merge --abort  -  отменить слияние
// git merge --continue  -  продолжить слияние
// git merge --no-ff branch_name  -  смержить ветку branch_name в текущую ветку (master) без fast-forward слияния (создаст новый коммит)
// git merge --squash branch_name  -  смержить ветку branch_name в текущую ветку (master) с squash слиянием (создаст новый коммит)
// git merge --no-commit branch_name  -  смержить ветку branch_name в текущую ветку (master) без создания коммита (можно будет изменить сообщение коммита)
// git merge --no-ff --no-commit branch_name  -  смержить ветку branch_name в текущую ветку (master) без fast-forward слияния и без создания коммита (можно будет изменить сообщение коммита)
// git merge --squash --no-commit branch_name  -  смержить ветку branch_name в текущую ветку (master) с squash слиянием и без создания коммита (можно будет изменить сообщение коммита)

// git rebase branch_name  -  перебазировать текущую ветку (master) на ветку branch_name
// git rebase --abort  -  отменить перебазирование
// git rebase --continue  -  продолжить перебазирование
// git rebase --skip  -  пропустить коммит при перебазировании
// git rebase --onto branch_name  -  перебазировать текущую ветку (master) на ветку branch_name, но не включая в нее коммиты ветки branch_name
// git rebase --onto branch_name commit_id  -  перебазировать текущую ветку (master) на ветку branch_name, но не включая в нее коммиты ветки branch_name до коммита commit_id
// git rebase --onto branch_name commit_id commit_id  -  перебазировать текущую ветку (master) на ветку branch_name, но не включая в нее коммиты ветки branch_name до коммита commit_id, но включая коммит commit_id
// git rebase --onto branch_name commit_id commit_id branch_name  -  перебазировать ветку branch_name на ветку branch_name, но не включая в нее коммиты ветки branch_name до коммита commit_id, но включая коммит commit_id

// git cherry-pick commit_id  -  взять коммит commit_id из ветки, в которой он был создан, и вставить его в текущую ветку (master)

// git reset --hard commit_id  -  сбросить текущую ветку (master) на коммит commit_id (удалит все коммиты после commit_id)
// git reset --soft commit_id  -  сбросить текущую ветку (master) на коммит commit_id (удалит все коммиты после commit_id, но изменения останутся в индексе)
// git reset --mixed commit_id  -  сбросить текущую ветку (master) на коммит commit_id (удалит все коммиты после commit_id, но изменения останутся в рабочей директории)
// git reset --keep commit_id  -  сбросить текущую ветку (master) на коммит commit_id (удалит все коммиты после commit_id, но изменения останутся в индексе и рабочей директории)
// git reset --hard HEAD~1  -  сбросить текущую ветку (master) на один коммит назад (удалит последний коммит)
// git reset --hard HEAD~2  -  сбросить текущую ветку (master) на два коммита назад (удалит два последних коммита)

// git revert commit_id  -  отменить коммит commit_id (создаст новый коммит, в котором изменения из коммита commit_id будут отменены)

// git clean -n  -  показать список файлов, которые будут удалены командой git clean
// git clean -f  -  удалить все файлы, которые не отслеживаются git (удалит все файлы, которые не отслеживаются git, но не удалит файлы, которые отслеживаются git)
// git clean -f -d  -  удалить все файлы и директории, которые не отслеживаются git (удалит все файлы и директории, которые не отслеживаются git, но не удалит файлы и директории, которые отслеживаются git)

// git stash  -  сохранить все изменения в индексе и рабочей директории во временное хранилище (stash)
// git stash list  -  показать список сохраненных изменений во временном хранилище (stash)
// git stash apply  -  применить последние изменения из временного хранилища (stash) к текущей ветке (master) (применит последние изменения из временного хранилища (stash) к текущей ветке (master))
// git stash apply stash@{1}  -  применить изменения из временного хранилища (stash) с номером stash@{1} к текущей ветке (master) (применит изменения из временного хранилища (stash) с номером stash@{1} к текущей ветке (master))

// git stash drop  -  удалить последние изменения из временного хранилища (stash) (удалит последние изменения из временного хранилища (stash))
// git stash drop stash@{1}  -  удалить изменения из временного хранилища (stash) с номером stash@{1} (удалит изменения из временного хранилища (stash) с номером stash@{1})

// git stash pop  -  применить последние изменения из временного хранилища (stash) к текущей ветке (master) и удалить их из временного хранилища (stash) (применит последние изменения из временного хранилища (stash) к текущей ветке (master) и удалит их из временного хранилища (stash))
// git stash pop stash@{1}  -  применить изменения из временного хранилища (stash) с номером stash@{1} к текущей ветке (master) и удалить их из временного хранилища (stash) (применит изменения из временного хранилища (stash) с номером stash@{1} к текущей ветке (master) и удалит их из временного хранилища (stash))

// git stash clear  -  удалить все изменения из временного хранилища (stash) (удалит все изменения из временного хранилища (stash)) (удалит все изменения из временного хранилища (stash))

// git stash branch  -  создать новую ветку и применить последние изменения из временного хранилища (stash) к этой ветке (создаст новую ветку и применит последние изменения из временного хранилища (stash) к этой ветке) (создаст новую ветку и применит последние изменения из временного хранилища (stash) к этой ветке)

// git stash branch new_branch  -  создать новую ветку (new_branch) и применить последние изменения из временного хранилища (stash) к этой ветке (создаст новую ветку (new_branch) и применит последние изменения из временного хранилища (stash) к этой ветке) (создаст новую ветку (new_branch) и применит последние изменения из временного хранилища (stash) к этой ветке)

// git stash branch new_branch stash@{1}  -  создать новую ветку (new_branch) и применить изменения из временного хранилища (stash) с номером stash@{1} к этой ветке (создаст новую ветку (new_branch) и применит изменения из временного хранилища (stash) с номером stash@{1} к этой ветке) (создаст новую ветку (new_branch) и применит изменения из временного хранилища (stash) с номером stash@{1} к этой ветке)


// git stash show  -  показать последние изменения из временного хранилища (stash) (покажет последние изменения из временного хранилища (stash)) (покажет последние изменения из временного хранилища (stash))

// git stash show stash@{1}  -  показать изменения из временного хранилища (stash) с номером stash@{1} (покажет изменения из временного хранилища (stash) с номером stash@{1}) (покажет изменения из временного хранилища (stash) с номером stash@{1})

// git stash list  -  показать список изменений во временном хранилище (stash) (покажет список изменений во временном хранилище (stash)) (покажет список изменений во временном хранилище (stash))


// Что такое
// что такео git merge -  git merge - это команда, которая используется для слияния одной или нескольких веток в текущую ветку. (git merge - это команда, которая используется для слияния одной или нескольких веток в текущую ветку.) (git merge - это команда, которая используется для слияния одной или нескольких веток в текущую ветку.)
// что такое git rebase -  git rebase - это команда, которая используется для перебазирования текущей ветки на другую ветку. (git rebase - это команда, которая используется для перебазирования текущей ветки на другую ветку.) (git rebase - это команда, которая используется для перебазирования текущей ветки на другую ветку.)
// что такое git stash -  git stash - это команда, которая используется для временного сохранения изменений в локальном репозитории. (git stash - это команда, которая используется для временного сохранения изменений в локальном репозитории.) (git stash - это команда, которая используется для временного сохранения изменений в локальном репозитории.)
// что такое git stash pop -  git stash pop - это команда, которая используется для применения последних изменений из временного хранилища (stash) и удаления их из временного хранилища (stash). (git stash pop - это команда, которая используется для применения последних изменений из временного хранилища (stash) и удаления их из временного хранилища (stash).) (git stash pop - это команда, которая используется для применения последних изменений из временного хранилища (stash) и удаления их из временного хранилища (stash).)
// что такое git stash apply -  git stash apply - это команда, которая используется для применения последних изменений из временного хранилища (stash). (git stash apply - это команда, которая используется для применения последних изменений из временного хранилища (stash).) (git stash apply - это команда, которая используется для применения последних изменений из временного хранилища (stash).)
// git force push -  git force push - это команда, которая используется для перезаписи удаленного репозитория. (git force push - это команда, которая используется для перезаписи удаленного репозитория.) (git force push - это команда, которая используется для перезаписи удаленного репозитория.)

// список сокрашенные флагов
// -a -  -a - это флаг, который используется для добавления всех измененных файлов в индекс. ( -a - это флаг, который используется для добавления всех измененных файлов в индекс.) ( -a - это флаг, который используется для добавления всех измененных файлов в индекс.)
// -m -  -m - это флаг, который используется для добавления сообщения к коммиту. ( -m - это флаг, который используется для добавления сообщения к коммиту.) ( -m - это флаг, который используется для добавления сообщения к коммиту.)
// -f -  -f - это флаг, который используется для перезаписи удаленного репозитория. ( -f - это флаг, который используется для перезаписи удаленного репозитория.) ( -f - это флаг, который используется для перезаписи удаленного репозитория.)
// -d -  -d - это флаг, который используется для удаления ветки. ( -d - это флаг, который используется для удаления ветки.) ( -d - это флаг, который используется для удаления ветки.)
// -D -  -D - это флаг, который используется для удаления ветки. ( -D - это флаг, который используется для удаления ветки.) ( -D - это флаг, который используется для удаления ветки.)
// -b -  -b - это флаг, который используется для создания новой ветки. ( -b - это флаг, который используется для создания новой ветки.) ( -b - это флаг, который используется для создания новой ветки.)
// -r -  -r - это флаг, который используется для удаления удаленной ветки. ( -r - это флаг, который используется для удаления удаленной ветки.) ( -r - это флаг, который используется для удаления удаленной ветки.)
// -R -  -R - это флаг, который используется для переименования ветки. ( -R - это флаг, который используется для переименования ветки.) ( -R - это флаг, который используется для переименования ветки.)
// -s -  -s - это флаг, который используется для подписи коммита. ( -s - это флаг, который используется для подписи коммита.) ( -s - это флаг, который используется для подписи коммита.)

// приверы команд
// git branch -d <branch_name> - удалить ветку
// git branch -D <branch_name> - удалить ветку
// git branch -b <branch_name> - создать ветку
// git branch -r <branch_name> - удалить удаленную ветку
// git branch -R <branch_name> - переименовать ветку
// git branch -s <branch_name> - подписать коммит
